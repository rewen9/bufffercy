# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# Импортируйте необходимые модули
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItem, QStandardItemModel
import subprocess

class Ui_Frame(object):
    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(513, 588)
        Frame.setMinimumSize(QtCore.QSize(300, 300))
        Frame.setWindowOpacity(1)
        self.checkBox = QtWidgets.QCheckBox(Frame)
        self.checkBox.setGeometry(QtCore.QRect(0, 540, 311, 28))
        self.checkBox.setObjectName("checkBox")
        self.tableView = QtWidgets.QTableView(Frame)
        self.tableView.setGeometry(QtCore.QRect(0, 0, 511, 531))
        self.tableView.setDragEnabled(True)
        self.tableView.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.tableView.setObjectName("tableView")
        self.model_tableView = QStandardItemModel()
        self.tableView.setModel(self.model_tableView)
        self.tableView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tableView.customContextMenuRequested.connect(self.copy_text_to_clipboard)
        # тестовая кнопка
        self.btn_test = QtWidgets.QPushButton(Frame)
        self.btn_test.setGeometry(QtCore.QRect(300, 540, 110, 40))
        self.btn_test.setObjectName("btn_test")
        self.btn_test.clicked.connect(self.addItem)
        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)
        self.is_install_xclip = False
        
        
    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "bufercy"))
        self.checkBox.setText(_translate("Frame", "Заполнять из буфера обмена"))
        self.btn_test.setText(_translate("Frame", "PushButton"))
    
    def addItem(self) -> None:
        _text_buffer = self.get_object_from_clipboard()
        print(_text_buffer)
        if _text_buffer:
            row = [
                QStandardItem(_text_buffer),
            ]
            self.model_tableView.appendRow(row)
    
    def copy_text_to_clipboard(self) -> None:
        """ Копирование текста в буфер обмена из QT"""
        index = self.tableView.currentIndex()
        model = self.tableView.model()
        text = model.data(index, QtCore.Qt.DisplayRole)
        clipboard = QtWidgets.QApplication.clipboard()
        clipboard.setText(text)
    
    def get_object_from_clipboard(self) -> str:
        import platform
        system = platform.system()
        if system == 'Linux':
            return self.get_last_copied_object_linux()
        elif system == 'Windows':
            return self.get_last_copied_object_windows()
        else:
            return None

    def get_last_copied_object_linux(self) -> str:
        if self.is_install_xclip:
            self.install_xclip()
            self.is_install_xclip = True
        command = ['xclip', '-selection', 'clipboard', '-o']
        try:
            process = subprocess.run(command, capture_output=True, text=True, timeout=1)  # capture_output=True,
        except subprocess.TimeoutExpired:
            # возможно буфер qt был задействовать
            from PyQt5 import QtWidgets
            clipboard = QtWidgets.QApplication.clipboard()
            text_data = clipboard.text()
            if text_data:
                return text_data
            return None
        return process.stdout.strip() if process.stdout else None

    def get_last_copied_object_windows(self) -> str:
        import win32clipboard
        win32clipboard.OpenClipboard()
        data = win32clipboard.GetClipboardData(win32clipboard.CF_TEXT)
        win32clipboard.CloseClipboard()
        return data
    
    def install_xclip(self) -> None:
        try:
            # Try running the xclip command
            subprocess.run(['xclip', '-version'], check=True)
        except FileNotFoundError:
            subprocess.run(['sudo', 'apt-get', 'install', '-y', 'xclip'])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Frame = QtWidgets.QFrame()
    ui = Ui_Frame()
    ui.setupUi(Frame)
    Frame.show()
    sys.exit(app.exec_())
